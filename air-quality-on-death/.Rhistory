training_numeric <- training[,setdiff(names(training), c('Id', 'region', 'date'))]
cor(training_numeric)
cor(complete.cases(training_numeric))
complete.cases(training)
training[complete.cases(training),]
cor(training[complete.cases(training_numeric),])
cor(training[complete.cases(training),])
cor(training[complete.cases(training),])
str(training_numeric)
cor(training[complete.cases(training_numeric),])
str(training[complete.cases(training_numeric),])
str(training_numeric[complete.cases(training_numeric),])
cor(training_numeric[complete.cases(training_numeric),])
corrplot(cor_vars)
cor_vars <- cor(training_numeric[complete.cases(training_numeric),])
cor_vars <- cor(training_numeric[complete.cases(training_numeric),])
corrplot(cor_vars)
set.seed(1234)
dindex <- createDataPartition(training$mortality_rate, p=0.7, list=FALSE)
train_data <- training[dindex,]
test_data <- training[-dindex,]
fitControl <- trainControl(method = "cv",
number = 5)
model_rf <- train(Outcome~.,
train_data,
method="ranger",
metric="RMSE",
tuneLength=10,
preProcess = c('center', 'scale'),
trControl=fitControl)
names(testing)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneLength=10,
preProcess = c('center', 'scale'),
trControl=fitControl)
library(needs)
needs(ggplot2,
lubridate,
dplyr,
gridExtra,
corrplot,
caret,
Metrics)
model_rf$bestTune
model_rf$results
library(Metrics)
?rmse
pred <- predict(model_rf, test_data)
rmse(test_data$mortality_rate, pred)
pred
dim(pred)
length(pred)
rmse(test_data$mortality_rate, pred)
length(test_data$mortality_rate)
length(pred)
kk3 <- predict(model_rf, test_data)
kk3
length(kk3)
nrow(test_data)
pred <- predict(model_rf, test_data)
length(pred)
pred <- predict(model_rf, train_data)
length(pred)
nrow(train_data)
plot(model_rf)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred <- predict(model_rf, train_data)
pred <- predict(model_rf, test_data)
length(pred)
pred <- predict(model_rf, test_data)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
na.action = na.pass,
trControl=fitControl)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred <- predict(model_rf, newdata = test_data)
length(pred)
nrow(test_data)
predict(model_rf, newdata = test_data[1:10,])
test_data[1:10,]
predict(model_rf, newdata = test_data[1:10,])
predict(model_rf, test_data[1:10,])
predict(model_rf, test_data)
predict(model_rf, test_data[1:100,])
test_data[1:100,]
xgb_grid_1 = expand.grid(
nrounds = 50,
eta = c(0.03),
max_depth = 1,
gamma = 0,
colsample_bytree = 0.6,
min_child_weight = 1,
subsample = 0.5
)
model_xgbTree <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="xgbTree",
metric="RMSE",
tuneGrid=xgb_grid_1,
trControl=fitControl)
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1
)
fit_xgboost <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method = "xgbTree",
metric = "RMSE",
tuneGrid = xgb_grid_1,
trControl = fitControl
)
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1,
colsample_bytree = 1,
min_child_weight = 1
)
fit_xgboost <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method = "xgbTree",
metric = "RMSE",
tuneGrid = xgb_grid_1,
trControl = fitControl
)
fit_xgboost_pred <- predict(fit_xgboost, test_data)
fit_xgboost_rmse <- rmse(fit_xgboost_pred, test_data$mortality_rate)
plot(fit_xgboost)
length(fit_xgboost_pred)
nrow(test_data)
sum(complete.cases(test_data))
?predict
fit_xgboost_pred <- predict(fit_xgboost, test_data,  missing = NA)
fit_xgboost_rmse <- rmse(fit_xgboost_pred, test_data$mortality_rate)
anyNA(testing)
training %>% filter(year(date) >= 2009) %>% head()
training %>% filter(year(date) >= 2009) %>% head()
anyNA(testing)
training %>% filter(year(date) >= 2009)
set.seed(1234)
training_complete %>% filter(year(date) >= 2009)
set.seed(1234)
training_complete <- training %>% filter(year(date) >= 2009)
dindex <- createDataPartition(training_complete$mortality_rate, p=0.7, list=FALSE)
train_data <- training[dindex,]
test_data <- training[-dindex,]
fitControl <- trainControl(method = "cv",
number = 5)
library(needs)
needs(ggplot2,
lubridate,
dplyr,
gridExtra,
corrplot,
caret,
Metrics,
doMC)
registerDoMC(cores = detectCores() - 1)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred <- predict(model_rf, newdata = test_data)
lengt(pred)
length(pred)
nrow(test_data)
anyNA(train_data)
set.seed(1234)
training_complete <- training %>% filter(year(date) >= 2009)
dindex <- createDataPartition(training_complete$mortality_rate, p=0.7, list=FALSE)
train_data <- training_complete[dindex,]
test_data <- training_complete[-dindex,]
fitControl <- trainControl(method = "cv",
number = 5)
model_rf <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred <- predict(model_rf, newdata = test_data)
?rmse
rmse(test_data$mortality_rate, pred)
pred_rf <- predict(model_rf, newdata = test_data)
rmse(test_data$mortality_rate, pred_rf)
xgb_grid_1 = expand.grid(
nrounds = 1000,
eta = c(0.01, 0.001, 0.0001),
max_depth = c(2, 4, 6, 8, 10),
gamma = 1,
colsample_bytree = 1,
min_child_weight = 1
)
fit_xgboost <- train(mortality_rate~O3+PM10+PM25+NO2+T2M,
train_data,
method = "xgbTree",
metric = "RMSE",
tuneGrid = xgb_grid_1,
trControl = fitControl
)
fit_xgboost_pred <- predict(fit_xgboost, test_data,  missing = NA)
rmse(test_data$mortality_rate, fit_xgboost_pred)
fit_xgboost_pred <- predict(fit_xgboost, test_data)
rmse(test_data$mortality_rate, fit_xgboost_pred)
plot(fit_xgboost)
model_list <- list(RF=model_rf, XGBOOST=fit_xgboost)
resamples <- resamples(model_list)
model_cor <- modelCor(resamples)
corrplot(model_cor)
bwplot(resamples, metric="RMSE")
table(year(testing$date))
# Generate predictions
results <- predict(model_rf, newdata = testing)
# Assemble results
df <- data.frame(Id = testing$Id,
mortality_rate = results)
# Write submission
write.csv(df, "../output/submission.csv", row.names = FALSE)
training$date <- ymd(training$date)
testing$date <- ymd(testing$date)
month(training$date)
training$month <- month(training$date)
training$month <- month(training$date)
testing$month <- month(testing$date)
set.seed(1234)
training_complete <- training %>% filter(year(date) >= 2009)
dindex <- createDataPartition(training_complete$mortality_rate, p=0.7, list=FALSE)
train_data <- training_complete[dindex,]
test_data <- training_complete[-dindex,]
model_rf2 <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred_rf2 <- predict(model_rf2, newdata = test_data)
rmse(test_data$mortality_rate, pred_rf2)
model_xgboost2 <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month,
train_data,
method = "xgbTree",
metric = "RMSE",
tuneGrid = xgb_grid_1,
trControl = fitControl
)
fit_xgboost_pred2 <- predict(model_xgboost2, test_data)
rmse(test_data$mortality_rate, fit_xgboost_pred2)
# Generate predictions
results <- predict(model_rf2, newdata = testing)
# Assemble results
df <- data.frame(Id = testing$Id,
mortality_rate = results)
# Write submission
write.csv(df, "../output/submission_2.csv", row.names = FALSE)
varImp(model_rf2)
model_rf2 <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month,
train_data,
method="ranger",
metric="RMSE",
importance = TRUE,
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
model_rf2 <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month,
train_data,
method="ranger",
metric="RMSE",
tuneLength=5,
#tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
plot(model_rf2)
pred_rf2 <- predict(model_rf2, newdata = test_data)
rmse(test_data$mortality_rate, pred_rf2)
model_rf2$bestTune
library(Boruta)
boruta_results <- Boruta(mortality_rate~O3+PM10+PM25+NO2+T2M+month, train_data)
boruta_results
plot(boruta_results)
names(testing)
model_rf3 <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="ranger",
metric="RMSE",
tuneGrid=expand.grid(.mtry=2),
trControl=fitControl)
pred_rf3 <- predict(model_rf3, newdata = test_data)
rmse(test_data$mortality_rate, pred_rf3)
library(Boruta)
boruta_results <- Boruta(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region, train_data)
boruta_results
plot(boruta_results)
# Assemble results
df <- data.frame(Id = testing$Id,
mortality_rate = pred_rf3)
# Generate predictions
results <- predict(model_rf3, newdata = testing)
# Assemble results
df <- data.frame(Id = testing$Id,
mortality_rate = results)
# Write submission
write.csv(df, "../output/submission_3.csv", row.names = FALSE)
model_knn <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="knn",
metric="RMSE",
tuneLength=10,
trControl=fitControl)
pred_knn <- predict(model_knn, newdata = test_data)
rmse(test_data$mortality_rate, pred_knn)
plot(model_knn)
model_knn
model_knn <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="knn",
metric="RMSE",
preProc=c("center", "scale"),
tuneLength=10,
trControl=fitControl)
pred_knn <- predict(model_knn, newdata = test_data)
rmse(test_data$mortality_rate, pred_knn)
#nn_grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(1, 2, 3, 4, 5))
model_nnet <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="nnet",
metric="RMSE",
preProc=c("center", "scale"),
tuneLength=10,
#tuneGrid = nn_grid,
trace = FALSE,
trControl=fitControl)
pred_nnet <- predict(model_nnet, newdata = test_data)
rmse(test_data$mortality_rate, pred_nnet)
plot(model_nnet)
model_nnet$bestTune
model_nb <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="nb",
metric="RMSE",
preProc=c("center", "scale"),
tuneLength=10,
trControl=fitControl)
model_glmnet <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="glmnet",
metric="RMSE",
preProc=c("center", "scale"),
tuneLength=10,
trControl=fitControl)
pred_glmnet <- predict(model_glmnet, newdata = test_data)
rmse(test_data$mortality_rate, pred_glmnet)
pred_glmnet
model_glmnet$finalModel
model_glmnet$bestTune
pred_glmnet <- predict(model_glmnet, newdata = test_data)
rmse(test_data$mortality_rate, pred_glmnet)
summary(model_glmnet$finalModel)
model_glm <- train(mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
method="glm",
metric="RMSE",
preProc=c("center", "scale"),
tuneLength=10,
trControl=fitControl)
pred_glm <- predict(model_glm, newdata = test_data)
rmse(test_data$mortality_rate, pred_glm)
pred_glm <- predict(model_glm, newdata = test_data)
rmse(test_data$mortality_rate, pred_glm)
summary(model_glm$finalModel)
model_list <- list(RF=model_rf, XGBOOST=fit_xgboost)
resamples <- resamples(model_list)
model_list <- list(RF=model_rf3, XGBOOST=fit_xgboost2, KNN=model_knn, NNET=model_nnet, GMLNET=model_glmnet)
model_list <- list(RF=model_rf3, XGBOOST=model_xgboost2, KNN=model_knn, NNET=model_nnet, GMLNET=model_glmnet)
resamples <- resamples(model_list)
model_cor <- modelCor(resamples)
corrplot(model_cor)
bwplot(resamples, metric="RMSE")
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE)
stack_rf <- caretStack(
model_list,
method="rf",
metric="RMSE",
trControl=stackControl
)
library(needs)
needs(ggplot2,
lubridate,
dplyr,
gridExtra,
corrplot,
caret,
Metrics,
Boruta,
caretEnsemble,
doMC)
registerDoMC(cores = detectCores() - 1)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE)
stack_rf <- caretStack(
model_list,
method="rf",
metric="RMSE",
trControl=stackControl
)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE)
stack_rf <- caretStack(
model_list,
method="rf",
metric="RMSE",
trControl=stackControl
)
model_list
?caretList
model_list_big <- caretList(
mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
trControl=fitControl,
metric="RMSE",
tuneList=list(
FIT_ranger = caretModelSpec(method="ranger"),
FIT_xgbTree = caretModelSpec(method="xgbTree", tuneGrid=xgb_grid_1),
FIT_glmnet = caretModelSpec(method="glmnet", preProc=c("center", "scale")),
FIT_svmRadial = caretModelSpec(method="svmRadial"),
FIT_knn = caretModelSpec(method="knn", preProc=c("center", "scale")),
FIT_nnet = caretModelSpec(method = "nnet", maxit = 1000, tuneGrid = nn_grid, trace = F, linout = 1, preProc=c("center", "scale"))
)
)
nn_grid <- expand.grid(.decay = c(0.5, 0.1), .size = c(1, 2, 3, 4, 5))
model_list_big <- caretList(
mortality_rate~O3+PM10+PM25+NO2+T2M+month+region,
train_data,
trControl=fitControl,
metric="RMSE",
tuneList=list(
FIT_ranger = caretModelSpec(method="ranger"),
FIT_xgbTree = caretModelSpec(method="xgbTree", tuneGrid=xgb_grid_1),
FIT_glmnet = caretModelSpec(method="glmnet", preProc=c("center", "scale")),
FIT_svmRadial = caretModelSpec(method="svmRadial"),
FIT_knn = caretModelSpec(method="knn", preProc=c("center", "scale")),
FIT_nnet = caretModelSpec(method = "nnet", maxit = 1000, tuneGrid = nn_grid, trace = F, linout = 1, preProc=c("center", "scale"))
)
)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE)
stack_rf <- caretStack(
model_list,
method="rf",
metric="RMSE",
trControl=stackControl
)
stackControl <- trainControl(method="repeatedcv", number=10, repeats=3, savePredictions=TRUE)
stack_rf <- caretStack(
model_list_big,
method="rf",
metric="RMSE",
trControl=stackControl
)
stack_rf_pred <- predict(stack_rf, test_data)
stack_rf_pred <- predict(stack_rf, newdata =test_data)
anyNA(train_data)
names(train_data)
names(test_data)
stack_rf
str(train_data)
str(test_data)
levels(train_data$region)
levels(test_data$region)
stack_rf_pred <- predict(stack_rf, newdata =test_data)
stack_rf$ens_model
stack_rf$models
resamples(model_list_big)
modelCor(resamples(model_list_big))
cor_mix <-  modelCor(resamples(model_list_big))
corrplot(cor_mix)
cor_mix <-  modelCor(resamples(model_list_big))
cor_mix
corrplot(cor_mix)
resamples_mix <- resamples(model_list_big)
cor_mix <-  modelCor(resamples_mix)
cor_mix
corrplot(cor_mix)
dotplot(resamples_mix)
bwplot(resamples_mix, metric="RMSE")
dotplot(resamples_mix, metric="RMSE")
predict(model_list_big, newdata=head(test_data))
predict(stack_rf, newdata=test_data, type="prob")
predict(stack_rf, newdata=test_data)
predict(stack_rf, newdata=test_data, type="prob")
ls()
predict(stack_rf, newdata=test_data)
summary(stack_rf)
stack_rf$models
stack_rf$models$FIT_nnet
